// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * $Id$
 * Universidad Mariana (San Juan de Pasto - Colombia)
 * Programa Ingeniería de Sistemas
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Análisis y modelamiento de software
 * Caso de estudio: Trazabilidad a la vacunación
 * Autor: Giovanni Hernández P. - 18-noviembre-2021
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
package syt_vacunacion.mundo;

import java.util.ArrayList;

/**
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * $Id$
 * Universidad XX (San Juan de Pasto - Colombia)
 * Programa Ingeniería de Sistemas
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Caso de estudio: Seguimiento y trazabilidad a la vacunación
 * Autor: Giovanni Hernández P. - 19-febrero-2022
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
public class Facultad {
	
	// - - - - - - - - - - - - - - - - - - - - - -
	// Atributos
	// - - - - - - - - - - - - - - - - - - - - - -
	/**
	 * El nombre de la facultad
	 */
	private String nombre;
	
	/**
	 * Los programas de una facultad
	 */
	private ArrayList<Programa> programas;
	
	// - - - - - - - - - - - - - - - - - - - - - -
	// Métodos
	// - - - - - - - - - - - - - - - - - - - - - -
	/**
	 * Constructor de la clase facultad
	 * @param nombre
	 */
	public Facultad(String nombre) {
		this.nombre = nombre;
		this.programas = new ArrayList<Programa>();
	}
	
	/**
	 * Busca un programa en la lista de programa
	 * @param pNombre El nombre del programa
	 * @return Devuelve el programa encontrado, de lo contrario retorna null
	 */
	public Programa buscarPrograma(String pNombre)
	{
		Programa programaBuscado=null;
		boolean encontrado=false;
		for (int indice = 0; indice < programas.size() && !encontrado ; indice++) 
		{
			Programa miPrograma = (Programa) programas.get(indice);
			if(miPrograma.darNombre().equals(pNombre))
			{
				encontrado = true;
				programaBuscado = miPrograma;
			}
		}
		return programaBuscado;
	}
	
	/**
	 * Agrega un nuevo programa a la facultad
	 */
	public void agregarPrograma(String pNombre)
	{
		Programa miPrograma = new Programa(pNombre);
		programas.add(miPrograma);
	}
	
	/**
	 * Busca un estudiante de las facultades
	 * @param pId La identificación del estudiante pId!=""
	 * @return Devuelve el estudiante encontrado, de lo contrario retorna null
	 */
	public Estudiante buscarEstudiante(String pId)
	{
		Estudiante estudianteBuscado=null;
		boolean encontrado=false;
		for (int indice = 0; indice < programas.size() && !encontrado ; indice++) 
		{
			Programa miPrograma = (Programa) programas.get(indice);
			Estudiante miEstudiante = miPrograma.buscarEstudiante(pId);
			if(miEstudiante != null)
			{
				encontrado = true;
				estudianteBuscado = miEstudiante;
			}
		}
		return estudianteBuscado;
	}

	/**
	 * @return the nombre
	 */
	public String darNombre() {
		return nombre;
	}

	/**
	 * @param nombre the nombre to set
	 */
	public void modificarNombre(String nombre) {
		this.nombre = nombre;
	}

	/**
	 * @return the programas
	 */
	public ArrayList<Programa> darProgramas() {
		return programas;
	}

	/**
	 * @param programas the programas to set
	 */
	public void modifcarProgramas(ArrayList<Programa> programas) {
		this.programas = programas;
	}
	
	
};
